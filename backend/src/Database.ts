// Source code generated by AppGPT (www.appgpt.tech)

 //Class to create tables and seed new database
import { DataSource } from "typeorm";
import { DBConfiguration } from "./Configuration";
import { SettingsEntity } from "./db/Settings.entity";
//autogenerate imports based on resources
import { PurchaseLinkEntity } from "./db/PurchaseLink.entity";
import { VideosEntity } from "./db/Videos.entity";
import { NFLStarsEntity } from "./db/NFLStars.entity";

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [SettingsEntity, PurchaseLinkEntity, VideosEntity, NFLStarsEntity];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables


    await Database.Seed();
  }
  static async Seed() {
    let data: any = {"PurchaseLink":[{"link":"link 1","id":83},{"link":"link 2","id":56},{"link":"link 3","id":25},{"link":"link 4","id":5},{"link":"link 5","id":94}],"Videos":[{"videoLink":"videoLink 1","id":65},{"videoLink":"videoLink 2","id":41},{"videoLink":"videoLink 3","id":70},{"videoLink":"videoLink 4","id":15},{"videoLink":"videoLink 5","id":59}],"NFLStars":[{"imageLink":"imageLink 1","id":90},{"imageLink":"imageLink 2","id":26},{"imageLink":"imageLink 3","id":41},{"imageLink":"imageLink 4","id":53},{"imageLink":"imageLink 5","id":69}]};
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true){
      console.log('   Seeding database...');
      await this.SeedResource("PurchaseLinkEntity", data.PurchaseLink);
await this.SeedResource("VideosEntity", data.Videos);
await this.SeedResource("NFLStarsEntity", data.NFLStars); 
      await this.SeedResource("SettingsEntity", {
        settingname: "isSeeded",
        settingvalue: "true",
      });
    }else{
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository("SettingsEntity");
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: "isSeeded",
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table '+resourceName);
    await repo.upsert(resourceData, ["id"]);
  }
}

